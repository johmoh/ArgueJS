/** @license MIT (http://opensource.org/licenses/MIT) */
if("function"!=typeof define)var define=require("amdefine")(module);define(function(){"use strict";return function(r){return r()}(function(){function r(r){return"boolean"==typeof r}function t(r){return r instanceof Array}function e(r){return"function"==typeof r}function n(r){return r instanceof Object}function i(r){return e(r)}function o(r){var t,e,n,i=r;if(i)for(t=arguments.length,e=1;t>e;++e)n=arguments[e],i=i.replace(RegExp("\\{"+e+"\\}","g"),n);return i}function a(r,e,n,i,o){if(o){if(e===f.TAIL)return t(r);if(void 0===r)return n===!0;if(null===r)return i===!0}else{if(e===f.TAIL)return!0;if(void 0===r)return n===!0;if(null===r)return i===!0}return e===f.ANYTYPE?!0:L(r)===e||r instanceof e}function f(){}var u=!1,l=!1,c=!0,s="bad call: ",h=s+'type of "{1}" is invalid.',p=s+"no arguments. function call is not compatible with function specification.",d=s+"too many arguments. function call is not compatible with function specification.",m=s+"parameter specification #{1} is not an object structure.",w='parameter specification "{1}": ',g=w+"default value is not compatible to parameter type",v=w+'value of "{2}" has incorrect type (must be {3})',E=w+'"{2}" is invalid.',y=w+"type specification is missing.",b="parameter specification: parameter #{1} has no name",T=w+"specification contains more than one element.",A=w+'"{2}" is {3} allowed for the tail-parameter in a variadic function',k="in a variadic function the tail-parameter must be the last parameter in the function specification.",I=w+"type specification has too many elements.",N=w+'type specification contains unknown option "{2}".',O="Incompatible function call: ",Y=O+'mandatory argument "{1}" has no value.',j=O+"too many arguments. {1}",z=function(){var r=Object.prototype.toString.call(arguments);return function(t){return Object.prototype.toString.call(t)===r}}(),L=function(r){return void 0===r?void 0:null===r?null:r.constructor},P=function(){var r=/^[_a-z$]{1}[_a-z0-9$]*$/i;return function(t){return t?r.test(t):!1}}();return f.ANYTYPE=function(){},f.TAIL=function(){},f.getArguments=function(s,w){var O,_,S,U,$,q,x,F,R,V,B,C,D,G,H,J,K,M,Q,W;if(1===arguments.length){if(w=arguments[0],!w||w.length>0)throw Error(o(j,"no parameters defined but arguments given"));return{}}if(2!=arguments.length)throw Error(arguments.length<1?p:d);if(!t(s))throw Error(o(h,"_functionSpecification"));if(!z(w)&&!t(w))throw Error(o(h,"_arguments"));for(O=s.length,_={},B=w.length,C=0,D=w[C],G=0;O>G;++G){if(H=s[G],L(H)!==Object)throw Error(o(m,G));S=void 0,U=void 0,$=void 0,q=void 0,x=void 0,F=void 0,R=void 0,V=void 0;for(J in H)if(H.hasOwnProperty(J)){if(S)throw Error(o(T,S));if(S=J,!P(S))throw Error(o(E,S,"name"));if(K=H[J],e(K))$=!1,U=K;else if(t(K)){if(K.length<1)throw Error(o(y,S));if($=!0,U=K[0],K.length>=2){if(K.length>2)throw Error(o(I,S));q=!0,x=K[1]}}else{if(!n(K))throw Error(o(E,S,"type"));for(M in K)if(K.hasOwnProperty(M))switch(M){case"type":if(t(K.type)){if(K.type.length<1)throw Error(o(y,S));if(K.type.length>2)throw Error(o(I,S));$=!0,U=K.type[0]}else $=!1,U=K.type;break;case"defaultValue":q=!0,$=!0,x=K[M];break;case"allowUndefined":if(F=K[M],!r(F))throw Error(o(v,S,"allowUndefined","boolean"));break;case"allowNull":if(R=K[M],!r(R))throw Error(o(v,S,"allowNull","boolean"));break;case"parenthesizeTail":if(V=K[M],!r(V))throw Error(o(v,S,"parenthesizeTail","boolean"));break;default:throw Error(o(N,S,M))}}}if(!S)throw Error(o(b,G));if(!i(U))throw Error(o(E,S,"type"));if(U!==f.TAIL){if(void 0!==V)throw Error(o(A,S,"parenthesizeTail","only"));void 0===F&&(F=l),void 0===R&&(R=u)}else{if(void 0!==F)throw Error(o(A,S,"allowUndefined","not"));if(void 0!==R)throw Error(o(A,S,"allowNull","not"));if(G!=O-1)throw Error(k);void 0===V&&(V=c)}if(B>C&&a(D,U,F,R,!1)){if(U===f.TAIL){if(++C<B){Q=[D];do Q[Q.length]=w[C];while(++C<B);_[S]=Q}else _[S]=!t(D)||V?[D]:D;C=B;break}_[S]=D,++C,B>C&&(D=w[C])}else{if(!$)throw Error(o(Y,S));if(q){if(W=U!==Function&&U!==f.ANYTYPE&&e(x)?x():x,!a(W,U,F,R,!0))throw Error(o(g,S));_[S]=W}}}if(B>C)throw Error(o(j,"there are arguments left but all parameters are processed."));return _},f})});
/*
//@ sourceMappingURL=argue2.min.js.map
*/